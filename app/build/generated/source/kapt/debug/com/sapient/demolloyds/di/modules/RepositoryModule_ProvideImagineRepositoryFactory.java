// Generated by Dagger (https://dagger.dev).
package com.sapient.demolloyds.di.modules;

import com.sapient.demolloyds.data.remote.UnsplashApiService;
import com.sapient.demolloyds.data.repository.ImagineRepository;
import com.sapient.demolloyds.utils.StringUtils;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideImagineRepositoryFactory implements Factory<ImagineRepository> {
  private final RepositoryModule module;

  private final Provider<StringUtils> stringUtilsProvider;

  private final Provider<UnsplashApiService> apiServiceProvider;

  public RepositoryModule_ProvideImagineRepositoryFactory(RepositoryModule module,
      Provider<StringUtils> stringUtilsProvider, Provider<UnsplashApiService> apiServiceProvider) {
    this.module = module;
    this.stringUtilsProvider = stringUtilsProvider;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public ImagineRepository get() {
    return provideImagineRepository(module, stringUtilsProvider.get(), apiServiceProvider.get());
  }

  public static RepositoryModule_ProvideImagineRepositoryFactory create(RepositoryModule module,
      Provider<StringUtils> stringUtilsProvider, Provider<UnsplashApiService> apiServiceProvider) {
    return new RepositoryModule_ProvideImagineRepositoryFactory(module, stringUtilsProvider, apiServiceProvider);
  }

  public static ImagineRepository provideImagineRepository(RepositoryModule instance,
      StringUtils stringUtils, UnsplashApiService apiService) {
    return Preconditions.checkNotNullFromProvides(instance.provideImagineRepository(stringUtils, apiService));
  }
}
