// Generated by Dagger (https://dagger.dev).
package com.sapient.demolloyds.di.modules;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkApiModule_ProvidesRetrofitFactory implements Factory<Retrofit> {
  private final NetworkApiModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetworkApiModule_ProvidesRetrofitFactory(NetworkApiModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Retrofit get() {
    return providesRetrofit(module, okHttpClientProvider.get());
  }

  public static NetworkApiModule_ProvidesRetrofitFactory create(NetworkApiModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetworkApiModule_ProvidesRetrofitFactory(module, okHttpClientProvider);
  }

  public static Retrofit providesRetrofit(NetworkApiModule instance, OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(instance.providesRetrofit(okHttpClient));
  }
}
